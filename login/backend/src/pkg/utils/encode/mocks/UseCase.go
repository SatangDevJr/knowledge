// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "esystem/src/pkg/entity"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// GenerateFromPassword provides a mock function with given fields: pwd
func (_m *UseCase) GenerateFromPassword(pwd []byte) (string, error) {
	ret := _m.Called(pwd)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(pwd)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(pwd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWT provides a mock function with given fields: user
func (_m *UseCase) GenerateJWT(user *entity.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*entity.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatePassword provides a mock function with given fields: pwdHash, pwd
func (_m *UseCase) ValidatePassword(pwdHash []byte, pwd []byte) error {
	ret := _m.Called(pwdHash, pwd)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(pwdHash, pwd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
