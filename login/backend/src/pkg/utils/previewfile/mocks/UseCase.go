// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	error "esystem/src/pkg/utils/error"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// PreviewFile provides a mock function with given fields: fileId, domainId
func (_m *UseCase) PreviewFile(fileId int64, domainId int64) ([]byte, *error.ErrorCode) {
	ret := _m.Called(fileId, domainId)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int64, int64) []byte); ok {
		r0 = rf(fileId, domainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 *error.ErrorCode
	if rf, ok := ret.Get(1).(func(int64, int64) *error.ErrorCode); ok {
		r1 = rf(fileId, domainId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.ErrorCode)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
